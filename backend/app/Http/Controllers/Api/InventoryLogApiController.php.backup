<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Models\InventoryLog;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Validator;

class InventoryLogApiController extends Controller
{
    private function getCurrentUser()
    {
        $defaultUser = 'ravenampere0123@gmail.com';
        
        $validUser = DB::select('SELECT Email FROM Employee_Email WHERE Email = ?', [$defaultUser]);
        
        if (!empty($validUser)) {
            return $defaultUser;
        }
        
        $anyValidUser = DB::select('SELECT Email FROM Employee_Email LIMIT 1');
        
        if (!empty($anyValidUser)) {
            return $anyValidUser[0]->Email;
        }
        
        return null;
    }

    public function index()
    {
        try {
            $logs = InventoryLog::orderBy('Date', 'desc')->get();
            
            return response()->json([
                'success' => true,
                'data' => $logs
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error fetching inventory logs: ' . $e->getMessage()
            ], 500);
        }
    }

    public function getByItemName($itemName)
    {
        try {
            $logs = InventoryLog::where('Item_Name', $itemName)
                               ->orderBy('Date', 'desc')
                               ->get();
            
            return response()->json([
                'success' => true,
                'data' => $logs
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error fetching inventory logs: ' . $e->getMessage()
            ], 500);
        }
    }

    public function store(Request $request)
    {
        try {
            $validator = Validator::make($request->all(), [
                'item_name' => 'required|string|max:255',
                'item_quantity' => 'required|integer|min:1',
                'requested_by' => 'required|string|max:255',
                'requested_with' => 'nullable|string|max:255',
                'date' => 'nullable|date',
                'status' => 'nullable|string|max:100',
                'remarks' => 'nullable|string',
                'account_no' => 'nullable|string|max:255',
                'sn' => 'nullable|string|max:255'
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Validation failed',
                    'errors' => $validator->errors()
                ], 422);
            }

            $currentUser = $this->getCurrentUser();
            if ($currentUser === null) {
                return response()->json([
                    'success' => false,
                    'message' => 'No valid employee email found.'
                ], 500);
            }

            $log = InventoryLog::create([
                'Date' => $request->input('date', now()),
                'Item_Name' => $request->input('item_name'),
                'Item_Quantity' => $request->input('item_quantity'),
                'Requested_By' => $request->input('requested_by'),
                'Requested_With' => $request->input('requested_with', ''),
                'Status' => $request->input('status', 'Pending'),
                'Remarks' => $request->input('remarks', ''),
                'Account_No' => $request->input('account_no', ''),
                'SN' => $request->input('sn', ''),
                'Modified_By' => $currentUser,
                'User_Email' => $currentUser
            ]);

            return response()->json([
                'success' => true,
                'message' => 'Inventory log created successfully',
                'data' => $log
            ], 201);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error creating inventory log: ' . $e->getMessage()
            ], 500);
        }
    }

    public function show($id)
    {
        try {
            $log = InventoryLog::findOrFail($id);
            
            return response()->json([
                'success' => true,
                'data' => $log
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Inventory log not found'
            ], 404);
        }
    }

    public function update(Request $request, $id)
    {
        try {
            $validator = Validator::make($request->all(), [
                'item_quantity' => 'required|integer|min:1',
                'requested_by' => 'required|string|max:255',
                'requested_with' => 'nullable|string|max:255',
                'date' => 'nullable|date',
                'status' => 'nullable|string|max:100',
                'remarks' => 'nullable|string',
                'account_no' => 'nullable|string|max:255',
                'sn' => 'nullable|string|max:255'
            ]);

            if ($validator->fails()) {
                return response()->json([
                    'success' => false,
                    'message' => 'Validation failed',
                    'errors' => $validator->errors()
                ], 422);
            }

            $log = InventoryLog::findOrFail($id);
            
            $currentUser = $this->getCurrentUser();
            if ($currentUser === null) {
                return response()->json([
                    'success' => false,
                    'message' => 'No valid employee email found.'
                ], 500);
            }

            $log->update([
                'Date' => $request->input('date', $log->Date),
                'Item_Quantity' => $request->input('item_quantity'),
                'Requested_By' => $request->input('requested_by'),
                'Requested_With' => $request->input('requested_with', ''),
                'Status' => $request->input('status', 'Pending'),
                'Remarks' => $request->input('remarks', ''),
                'Account_No' => $request->input('account_no', ''),
                'SN' => $request->input('sn', ''),
                'Modified_By' => $currentUser,
                'User_Email' => $currentUser
            ]);

            return response()->json([
                'success' => true,
                'message' => 'Inventory log updated successfully',
                'data' => $log
            ]);

        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error updating inventory log: ' . $e->getMessage()
            ], 500);
        }
    }

    public function destroy($id)
    {
        try {
            $log = InventoryLog::findOrFail($id);
            $log->delete();
            
            return response()->json([
                'success' => true,
                'message' => 'Inventory log deleted successfully'
            ]);
        } catch (\Exception $e) {
            return response()->json([
                'success' => false,
                'message' => 'Error deleting inventory log: ' . $e->getMessage()
            ], 500);
        }
    }
}
